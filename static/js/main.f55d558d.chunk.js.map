{"version":3,"sources":["components/Card.js","components/CardList.js","components/Searchbox.js","components/Scroll.js","containers/App.js","actions.js","constants.js","registerServiceWorker.js","reducers.js","index.js"],"names":["Card","_ref","name","email","id","react_default","a","createElement","className","alt","src","concat","CardList","robots","map","robot","i","components_Card","key","Searchbox","searchChange","type","placeholder","onChange","Scroll","props","style","overflowY","border","height","children","App","this","onRequestRobots","_this$props","isPending","error","displayPage","_this$props2","onSearchChange","searchField","filteredRobots","filter","toLowerCase","includes","components_Searchbox","components_Scroll","components_CardList","Component","connect","state","searchRobots","requestRobots","dispatch","event","payload","target","value","fetch","then","response","json","data","catch","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","initialStateSearch","initialStateRobots","logger","createLogger","rootReducers","combineReducers","arguments","length","undefined","action","Object","assign","objectSpread","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","es","src_containers_App","document","getElementById","URL","process","origin","addEventListener","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.f55d558d.chunk.js","sourcesContent":["import React from 'react';\n\n\n//props OBJ way\n// const Card = (props) =>{\n\n//destructering way\nconst Card = ({name, email, id}) =>{\n\n\treturn (\n\n\t\t<div className=\"bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5 tc\">\n\t\t\t<img alt=\"robots\" src={`https://robohash.org/${id}?150x150`} />\n\t\t\t<div>\n\t\t\t\t<p>{name}</p>\n\t\t\t\t<p>{email}</p>\n\t\t\t</div>\n\t\t</div>\n\t);\n}\n\nexport default Card;","import React from 'react';\nimport Card from './Card';\n\nconst CardList = ({robots}) =>{\n\n\treturn(\n\t\t<div>\n\t\t\t{\n\t\t\t\trobots.map((robot, i) => {\n\t\t\t\t\treturn( \n\t\t\t\t\t<Card \n\t\t\t\t\t\tkey= {robot.id}\n\t\t\t\t\t\tname={robot.name} \n\t\t\t\t\t\temail={robot.email} \n\t\t\t\t\t\tid={robot.id}\n\t\t\t\t\t/>);\n\t\t\t\t})\n\t\t\t}\n\t\t</div>\n\t);\n}\n\nexport default CardList;\n","import React from 'react';\n\nconst Searchbox = ({searchChange}) =>{\n\treturn (\n\t\t<div className=\"pa2\">\n\t\t\t<input\n\t\t\t\tclassName=\"pa3 ba b--green bg-lightest-blue\"\n\t\t\t\ttype=\"search\"\n\t\t\t\tplaceholder=\"search robots\"\n\t\t\t\tonChange= {searchChange}\n\t\t\t/>\n\t\t</div>\n\t);\n}\n\nexport default Searchbox;\n","import React from 'react';\n\nconst Scroll = (props) =>{\n\treturn (\n\t\t<div style={{'overflowY': 'scroll', 'border':'3px solid black', 'height': '550px'}}>\n\t\t\t{props.children}\n\t\t</div>\n\t);\n}\n\nexport default Scroll;","import React, {Component} from 'react';\nimport { connect } from 'react-redux';\nimport CardList from '../components/CardList';\nimport Searchbox from '../components/Searchbox';\nimport Scroll from '../components/Scroll';\nimport './App.css';\n\nimport { setSearchField, requestRobots } from '../actions';\n\nconst mapStateToProps = (state) => {\n\treturn {\n\t\tsearchField: state.searchRobots.searchField,\n\t\tisPending: state.requestRobots.isPending,\n\t\trobots: state.requestRobots.robots,\n\t\terror: state.requestRobots.error\n\t}\n}\n\nconst mapDispatchToProps = (dispatch) => {\n\n\treturn {\n\t\tonSearchChange: (event) => dispatch(setSearchField(event.target.value)),\n\t\tonRequestRobots: () => dispatch(requestRobots())\n\t}\n}\n\nclass App extends Component {\n\n\tcomponentDidMount(){\n\t\tthis.props.onRequestRobots();\n\t}\n\n\trender(){\n\t\tconst { isPending, error } = this.props;\n\n\t\tif(isPending)\n\t\t{\n\t\t\treturn <h1>LOADING</h1>\n\t\t}\n\t\t\n\t\tif(error !== ''){\n\t\t\treturn <h1>{error}</h1>\n\t\t}else{\n\t\t\treturn this.displayPage();\n\t\t}\n\t}\n\n\tdisplayPage(){\n\t\tconst {robots, onSearchChange, searchField} = this.props;\n\t\tconst filteredRobots= robots.filter( robot => {\n\t\t\treturn robot.name.toLowerCase().includes(searchField.toLowerCase());\n\t\t});\n\n\t\treturn (\n\t\t\t<div className=\"tc\">\n\t\t\t\t<h1 className=\"f1\"> RoboFriends</h1>\n\t\t\t\t<Searchbox searchChange={onSearchChange}/>\n\t\t\t\t<Scroll>\n\t\t\t\t\t<CardList robots={filteredRobots} />\n\t\t\t\t</Scroll>\n\t\t\t</div>\n\t\t);\n\t}\n\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);","import {\n    CHANGE_SEARCH_FIELD,\n    REQUEST_ROBOTS_PENDING,\n    REQUEST_ROBOTS_SUCCESS,\n    REQUEST_ROBOTS_FAILED,\n} from './constants';\n\n// Returns an Object with two properties\n\nexport const setSearchField = (text) => ({\n    type: CHANGE_SEARCH_FIELD,\n    payload: text\n});\n\nexport const requestRobots = () => (dispatch) => {\n\n    dispatch({\n        type: REQUEST_ROBOTS_PENDING\n    });\n\n    fetch('https://jsonplaceholder.typicode.com/users')\n        .then(response => response.json())\n        .then(data => dispatch({\n            type: REQUEST_ROBOTS_SUCCESS,\n            payload: data\n        }))\n        .catch(error => {\n            dispatch({\n                type: REQUEST_ROBOTS_FAILED,\n                payload: error\n            })\n\n        })\n\n};\n","export const CHANGE_SEARCH_FIELD = 'CHANGE_SEARCH_FIELD';\n\nexport const REQUEST_ROBOTS_PENDING = 'REQUEST_ROBOTS_PENDING';\nexport const REQUEST_ROBOTS_SUCCESS = 'REQUEST_ROBOTS_SUCCESS';\nexport const REQUEST_ROBOTS_FAILED = 'REQUEST_ROBOTS_FAILED';\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import {\n    CHANGE_SEARCH_FIELD,\n    REQUEST_ROBOTS_PENDING,\n    REQUEST_ROBOTS_SUCCESS,\n    REQUEST_ROBOTS_FAILED,\n} from './constants';\n\nconst initialStateSearch = {\n    searchField: ''\n};\n\nexport const searchRobots = (state = initialStateSearch, action = {}) => {\n    switch (action.type) {\n        case CHANGE_SEARCH_FIELD:\n            return Object.assign({}, state, {\n                searchField: action.payload\n            });\n        default:\n            return state;\n    }\n}\n\nconst initialStateRobots = {\n    isPending: false,\n    robots: [],\n    error: \"\"\n}\n\nexport const requestRobots = (state = initialStateRobots, action = {}) => {\n    switch (action.type) {\n        case REQUEST_ROBOTS_PENDING:\n            //Re-assign the state with Object.assign function\n            return Object.assign({}, state, {\n                isPending: true\n            });\n        case REQUEST_ROBOTS_SUCCESS:\n            //Works the same as with Object.assign, but with ES6 Spread operator\n            return ({ ...state,\n                robots: action.payload,\n                isPending: false\n            });\n        case REQUEST_ROBOTS_FAILED:\n            return Object.assign({}, state, {\n                error: action.payload,\n                isPending: false\n            });\n        default:\n            return state;\n    }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { createStore, applyMiddleware, combineReducers } from 'redux'; \nimport { createLogger} from 'redux-logger';\nimport thunkMiddleware from 'redux-thunk';\nimport './index.css';\nimport App from './containers/App';\nimport registerServiceWorker from './registerServiceWorker';\nimport { searchRobots, requestRobots } from './reducers';\nimport 'tachyons';\n\nconst logger = createLogger();\nconst rootReducers= combineReducers({searchRobots, requestRobots});\nconst store = createStore(rootReducers, applyMiddleware(thunkMiddleware, logger));\n\nReactDOM.render(<Provider store={ store }>\n                    <App />\n                </Provider>, document.getElementById('root'));  \n\nregisterServiceWorker();\n\n"],"sourceRoot":""}